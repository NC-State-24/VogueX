# -*- coding: utf-8 -*-
"""Inference.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ylf054c9zctu8OAuVLkNjFuYuWAA7LsH
"""

import os
import joblib
import tensorflow as tf
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

# Define the FeatureExtractor class
class FeatureExtractor(tf.keras.Model):
    def __init__(self, feature_vocab_sizes, embedding_dim):
        super(FeatureExtractor, self).__init__()
        self.embeddings = {
            feature: tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim)
            for feature, vocab_size in feature_vocab_sizes.items()
        }

    def call(self, inputs):
        embedded = [self.embeddings[feature](tf.convert_to_tensor(inputs[feature])) for feature in inputs]
        concatenated = tf.concat(embedded, axis=1)
        return concatenated

# Load the model and encoders
model_save_dir = 'model_directory'  # Directory where your model and encoders are saved

# Load the model from the .h5 file, including custom objects
loaded_model = tf.keras.models.load_model(
    os.path.join(model_save_dir, 'text_feature_extractor.h5'),
    custom_objects={'FeatureExtractor': FeatureExtractor}
)

# Load the label encoders
features_to_encode = ['gender', 'masterCategory', 'subCategory', 'articleType', 'baseColour', 'season', 'usage']
loaded_label_encoders = {}
for col in features_to_encode:
    loaded_label_encoders[col] = joblib.load(os.path.join(model_save_dir, f'{col}_label_encoder.pkl'))

# Load the dataset used for inference (ensure this matches your original dataset structure)
data = pd.DataFrame({
    'id': [15970, 39386, 59263, 21379, 53759],
    'gender': ['Men', 'Men', 'Women', 'Men', 'Men'],
    'masterCategory': ['Apparel', 'Apparel', 'Accessories', 'Apparel', 'Apparel'],
    'subCategory': ['Topwear', 'Bottomwear', 'Watches', 'Bottomwear', 'Topwear'],
    'articleType': ['Shirts', 'Jeans', 'Watches', 'Track Pants', 'Tshirts'],
    'baseColour': ['Navy Blue', 'Blue', 'Silver', 'Black', 'Grey'],
    'season': ['Fall', 'Summer', 'Winter', 'Fall', 'Summer'],
    'usage': ['Casual', 'Casual', 'Casual', 'Casual', 'Casual'],
    'productDisplayName': [
        'Turtle Check Men Navy Blue Shirt', 'Peter England Men Party Blue Jeans',
        'Titan Women Silver Watch', 'Manchester United Men Solid Black Track Pants',
        'Puma Men Grey T-shirt'
    ],
    'image': ['15970.jpg', '39386.jpg', '59263.jpg', '21379.jpg', '53759.jpg']
})

# Prepare the dataset features for cosine similarity calculations
encoded_data = {col: loaded_label_encoders[col].transform(data[col]) for col in features_to_encode}
dataset_features = loaded_model({col: tf.constant(encoded_data[col]) for col in features_to_encode}).numpy()

# Function to find similar items
def find_similar_items(input_values, model, label_encoders, dataset, top_n=5):
    # Encode input values
    encoded_input = {col: tf.constant([label_encoders[col].transform([input_values[col]])[0]]) for col in input_values}
    input_features = model(encoded_input).numpy()

    # Compute cosine similarity
    similarities = cosine_similarity(input_features, dataset)
    indices = np.argsort(similarities[0])[::-1][:top_n]
    return data.iloc[indices]

# Input values to search
input_values = {
    'gender': 'Men',
    'masterCategory': 'Apparel',
    'subCategory': 'Topwear',
    'articleType': 'Shirts',
    'baseColour': 'Navy Blue',
    'season': 'Fall',
    'usage': 'Casual'
}

# Find and display similar items
similar_items = find_similar_items(input_values, loaded_model, loaded_label_encoders, dataset_features, top_n=5)
print(similar_items[['productDisplayName', 'image']])